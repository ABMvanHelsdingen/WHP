plot2 <- ggplot(data = data2) +
geom_line(aes(x=xs,y=spike), color = "green") +
geom_point(aes(x=cs, y=cspike), color = "red") +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third plot: total
total <- bl + spike
ctotal <- cbl + cspike
data3 <- data.frame(xs = xs, total = total, cs = cs, ctotal = ctotal)
plot3 <- ggplot(data = data3) +
geom_line(aes(x=xs,y=total), color = "black") +
geom_point(aes(x=cs, y=ctotal), color = "red") +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(ggpubr)
out <- ggarrange(plot1, plot2, plot3, ncol = 3)
out
# First plot: baseline
xs <- seq(-2,2,length.out=1000)
bl <- dnorm(xs)
cs <- c(-1.9, -0.7, 0.2, 0.9, 1.8)
cbl <- dnorm(cs)
data <- data.frame(xs = xs, bl = bl, cs = cs, cbl = cbl)
library(ggplot2)
plot1 <- ggplot(data = data) +
geom_line(aes(x=xs,y=bl), color = "blue") +
geom_point(aes(x=cs, y=cbl), color = "red") +
theme_classic() +
xlab("Spatial Dimension") +
ylab("Capture Rate") +
ylim(0,1.3) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second plot: Spike
spike <- dnorm(xs, mean = cs[4], sd = 0.4)
cspike <- dnorm(cs, mean = cs[4], sd = 0.4)
data2 <- data.frame(xs = xs, spike = spike, cs = cs, cspike = cspike)
plot2 <- ggplot(data = data2) +
geom_line(aes(x=xs,y=spike), color = "green") +
geom_point(aes(x=cs, y=cspike), color = "red") +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third plot: total
total <- bl + spike
ctotal <- cbl + cspike
data3 <- data.frame(xs = xs, total = total, cs = cs, ctotal = ctotal)
plot3 <- ggplot(data = data3) +
geom_line(aes(x=xs,y=total), color = "black") +
geom_point(aes(x=cs, y=ctotal), color = "red") +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(ggpubr)
out <- ggarrange(plot1, plot2, plot3, ncol = 3)
out
out <- ggarrange(plot1, plot2, plot3, ncol = 3,
labels = c("Baseline", "Spike", "Total"), label.x = 0.05)
out
# First plot: baseline
xs <- seq(-2,2,length.out=1000)
bl <- dnorm(xs)
cs <- c(-1.9, -0.7, 0.2, 0.9, 1.8)
cbl <- dnorm(cs)
data <- data.frame(xs = xs, bl = bl, cs = cs, cbl = cbl)
library(ggplot2)
plot1 <- ggplot(data = data) +
geom_line(aes(x=xs,y=bl), color = "blue", size = 3) +
geom_point(aes(x=cs, y=cbl), color = "red", size = 3) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("Capture Rate") +
ylim(0,1.3) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# First plot: baseline
xs <- seq(-2,2,length.out=1000)
bl <- dnorm(xs)
cs <- c(-1.9, -0.7, 0.2, 0.9, 1.8)
cbl <- dnorm(cs)
data <- data.frame(xs = xs, bl = bl, cs = cs, cbl = cbl)
library(ggplot2)
plot1 <- ggplot(data = data) +
geom_line(aes(x=xs,y=bl), color = "blue", linewidth = 3) +
geom_point(aes(x=cs, y=cbl), color = "red", size = 3) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("Capture Rate") +
ylim(0,1.3) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# First plot: baseline
xs <- seq(-2,2,length.out=1000)
bl <- dnorm(xs)
cs <- c(-1.9, -0.7, 0.2, 0.9, 1.8)
cbl <- dnorm(cs)
data <- data.frame(xs = xs, bl = bl, cs = cs, cbl = cbl)
library(ggplot2)
plot1 <- ggplot(data = data) +
geom_line(aes(x=xs,y=bl), color = "blue", linewidth = 3) +
geom_point(aes(x=cs, y=cbl), color = "red", size = 3) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("Capture Rate") +
ylim(0,1.3) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second plot: Spike
spike <- dnorm(xs, mean = cs[4], sd = 0.4)
cspike <- dnorm(cs, mean = cs[4], sd = 0.4)
data2 <- data.frame(xs = xs, spike = spike, cs = cs, cspike = cspike)
plot2 <- ggplot(data = data2) +
geom_line(aes(x=xs,y=spike), color = "green", linewidth = 3) +
geom_point(aes(x=cs, y=cspike), color = "red", size = 3) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third plot: total
total <- bl + spike
ctotal <- cbl + cspike
data3 <- data.frame(xs = xs, total = total, cs = cs, ctotal = ctotal)
plot3 <- ggplot(data = data3) +
geom_line(aes(x=xs,y=total), color = "black", linewidth = 3) +
geom_point(aes(x=cs, y=ctotal), color = "red", size = 3) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(ggpubr)
out <- ggarrange(plot1, plot2, plot3, ncol = 3,
labels = c("Baseline", "Spike", "Total"), label.x = 0.05)
out
out <- ggarrange(plot1, plot2, plot3, nrow = 3,
labels = c("Baseline", "Spike", "Total"), label.x = 0.05)
out
# First plot: baseline
xs <- seq(-2,2,length.out=1000)
bl <- dnorm(xs)
cs <- c(-1.9, -0.7, 0.2, 0.9, 1.8)
cbl <- dnorm(cs)
data <- data.frame(xs = xs, bl = bl, cs = cs, cbl = cbl)
library(ggplot2)
plot1 <- ggplot(data = data) +
geom_line(aes(x=xs,y=bl), color = "blue", linewidth = 2.5) +
geom_point(aes(x=cs, y=cbl), color = "red", size = 3) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("Capture Rate") +
ylim(0,1.3) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second plot: Spike
spike <- dnorm(xs, mean = cs[4], sd = 0.4)
cspike <- dnorm(cs, mean = cs[4], sd = 0.4)
data2 <- data.frame(xs = xs, spike = spike, cs = cs, cspike = cspike)
plot2 <- ggplot(data = data2) +
geom_line(aes(x=xs,y=spike), color = "green", linewidth = 2.5) +
geom_point(aes(x=cs, y=cspike), color = "red", size = 3) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third plot: total
total <- bl + spike
ctotal <- cbl + cspike
data3 <- data.frame(xs = xs, total = total, cs = cs, ctotal = ctotal)
plot3 <- ggplot(data = data3) +
geom_line(aes(x=xs,y=total), color = "black", linewidth = 2.5) +
geom_point(aes(x=cs, y=ctotal), color = "red", size = 3) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(ggpubr)
out <- ggarrange(plot1, plot2, plot3, nrow = 3,
labels = c("Baseline", "Spike", "Total"), label.x = 0.05)
out
# First plot: baseline
xs <- seq(-2,2,length.out=1000)
bl <- dnorm(xs)
cs <- c(-1.9, -0.7, 0.2, 0.9, 1.8)
cbl <- dnorm(cs)
data <- data.frame(xs = xs, bl = bl, cs = cs, cbl = cbl)
library(ggplot2)
plot1 <- ggplot(data = data) +
geom_line(aes(x=xs,y=bl), color = "blue", linewidth = 2.5) +
geom_point(aes(x=cs, y=cbl), color = "red", size = 3.5) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("Capture Rate") +
ylim(0,1.3) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second plot: Spike
spike <- dnorm(xs, mean = cs[4], sd = 0.4)
cspike <- dnorm(cs, mean = cs[4], sd = 0.4)
data2 <- data.frame(xs = xs, spike = spike, cs = cs, cspike = cspike)
plot2 <- ggplot(data = data2) +
geom_line(aes(x=xs,y=spike), color = "green", linewidth = 2.5) +
geom_point(aes(x=cs, y=cspike), color = "red", size = 3.5) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third plot: total
total <- bl + spike
ctotal <- cbl + cspike
data3 <- data.frame(xs = xs, total = total, cs = cs, ctotal = ctotal)
plot3 <- ggplot(data = data3) +
geom_line(aes(x=xs,y=total), color = "black", linewidth = 2.5) +
geom_point(aes(x=cs, y=ctotal), color = "red", size = 3.5) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(ggpubr)
out <- ggarrange(plot1, plot2, plot3, nrow = 3,
labels = c("Baseline", "Spike", "Total"), label.x = 0.05)
out
# First plot: baseline
xs <- seq(-2,2,length.out=1000)
bl <- dnorm(xs)
cs <- c(-1.9, -0.7, 0.2, 0.9, 1.8)
cbl <- dnorm(cs)
data <- data.frame(xs = xs, bl = bl, cs = cs, cbl = cbl)
library(ggplot2)
plot1 <- ggplot(data = data) +
geom_line(aes(x=xs,y=bl), color = "blue", linewidth = 2.5) +
geom_point(aes(x=cs, y=cbl), color = "red", size = 3.5) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("Capture Rate") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Second plot: Spike
spike <- dnorm(xs, mean = cs[4], sd = 0.4)
cspike <- dnorm(cs, mean = cs[4], sd = 0.4)
data2 <- data.frame(xs = xs, spike = spike, cs = cs, cspike = cspike)
plot2 <- ggplot(data = data2) +
geom_line(aes(x=xs,y=spike), color = "green", linewidth = 2.5) +
geom_point(aes(x=cs, y=cspike), color = "red", size = 3.5) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# Third plot: total
total <- bl + spike
ctotal <- cbl + cspike
data3 <- data.frame(xs = xs, total = total, cs = cs, ctotal = ctotal)
plot3 <- ggplot(data = data3) +
geom_line(aes(x=xs,y=total), color = "black", linewidth = 2.5) +
geom_point(aes(x=cs, y=ctotal), color = "red", size = 3.5) +
theme_classic() +
xlab("Spatial Dimension") +
ylab("") +
ylim(0,1.3) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(ggpubr)
out <- ggarrange(plot1, plot2, plot3, nrow = 3,
labels = c("Baseline", "Spike", "Total"), label.x = 0.05)
out
# simulate Weibull-Hawkes process
library(stelfi)
source("PhD/Ogata.R")
getwd()
setwd("C:/Users/avan283/OneDrive - The University of Auckland/Documents")
source("PhD/Ogata.R")
dyn.load(TMB::dynlib("weibull_hawkes"))
dyn.load(TMB::dynlib("PhD/Templates/weibull_hawkes"))
reps <- 10
runs <- 20
pars = expand.grid(mu = c(0.3, 3), beta = c(0.3, 3),
abratio = c(0.25, 0.75), k = c(0.4, 0.8, 1, 1.25, 2.5))
output <- matrix(0, nrow = nrow(pars), ncol = 4*reps)
sizes <- matrix(0, nrow = nrow(pars), ncol = reps)
for(i in 1:nrow(pars)){
for(rep in 1:reps){
times = UWOgata(pars$mu[i], pars$abratio[i]*pars$beta[i], pars$beta[i], pars$k[i], 1000)
sizes[i, rep] <- length(times)
NLLmin <- 100000
for(j in 1:runs){
mu <- runif(1, 0.1, 10)
beta <- runif(1, 0.1, 10)
alpha <- runif(1, 0.1, 0.9) * beta
k <- runif(1, 0.25, 4)
out <- tryCatch(
{
obj <- TMB::MakeADFun(data = list(times = times, marks = rep(1, length(times))),
parameters = list(log_mu = log(mu),
logit_abratio = qlogis(alpha/beta),
log_beta = log(beta),
log_k = log(k)),
hessian = TRUE, DLL = "weibull_hawkes", silent = TRUE)
opt <- stats::optim(obj$par, obj$fn, obj$gr, control = list(trace = 0))
obj$objective <- opt$value
if (obj$objective < NLLmin && obj$objective != 0){
z <- stelfi::get_coefs(obj)
NLLmin <- obj$objective
}
output[i, (rep - 1)*4 + 1] <- z[1,1]; output[i, (rep-1)*4 + 2] <- z[3,1]
output[i, (rep - 1)*4 + 3] <- z[2,1]/z[3,1]; output[i, (rep - 1)*4 + 4] <- z[4,1]
}, error = function(cond){
print(cond)
}
)
}
}
print(i)
}
reps <- 10
runs <- 20
pars = expand.grid(mu = c(1), beta = c(1),
abratio = c(0.25, 0.75), k = c(0.5, 1, 2))
output <- matrix(0, nrow = nrow(pars), ncol = 4*reps)
sizes <- matrix(0, nrow = nrow(pars), ncol = reps)
for(i in 1:nrow(pars)){
for(rep in 1:reps){
times = UWOgata(pars$mu[i], pars$abratio[i]*pars$beta[i], pars$beta[i], pars$k[i], 100)
sizes[i, rep] <- length(times)
NLLmin <- 100000
for(j in 1:runs){
mu <- runif(1, 0.1, 10)
beta <- runif(1, 0.1, 10)
alpha <- runif(1, 0.1, 0.9) * beta
k <- runif(1, 0.25, 4)
out <- tryCatch(
{
obj <- TMB::MakeADFun(data = list(times = times, marks = rep(1, length(times))),
parameters = list(log_mu = log(mu),
logit_abratio = qlogis(alpha/beta),
log_beta = log(beta),
log_k = log(k)),
hessian = TRUE, DLL = "weibull_hawkes", silent = TRUE)
opt <- stats::optim(obj$par, obj$fn, obj$gr, control = list(trace = 0))
obj$objective <- opt$value
if (obj$objective < NLLmin && obj$objective != 0){
z <- stelfi::get_coefs(obj)
NLLmin <- obj$objective
}
output[i, (rep - 1)*4 + 1] <- z[1,1]; output[i, (rep-1)*4 + 2] <- z[3,1]
output[i, (rep - 1)*4 + 3] <- z[2,1]/z[3,1]; output[i, (rep - 1)*4 + 4] <- z[4,1]
}, error = function(cond){
print(cond)
}
)
}
}
print(i)
}
warnings()
results <- cbind(pars, output)
View(results)
getwd()
setwd("IWP")
TMB::compile("weibull_hawkes.cpp")
# simulate Weibull-Hawkes process
library(stelfi)
source("Ogata.R")
dyn.load(TMB::dynlib("weibull_hawkes"))
# simulate Weibull-Hawkes process
library(stelfi)
source("Ogata.R")
dyn.load(TMB::dynlib("weibull_hawkes"))
reps <- 10
runs <- 20
pars = expand.grid(mu = c(1), beta = c(1),
abratio = c(0.25, 0.75), k = c(0.5, 1, 2), times=c(100,1000))
output <- matrix(0, nrow = nrow(pars), ncol = 4*reps)
sizes <- matrix(0, nrow = nrow(pars), ncol = reps)
for(i in 1:nrow(pars)){
for(rep in 1:reps){
times = UWOgata(pars$mu[i], pars$abratio[i]*pars$beta[i], pars$beta[i], pars$k[i], pars$times[i])
sizes[i, rep] <- length(times)
NLLmin <- 100000
for(j in 1:runs){
mu <- runif(1, 0.1, 10)
beta <- runif(1, 0.1, 10)
alpha <- runif(1, 0.1, 0.9) * beta
k <- runif(1, 0.25, 4)
out <- tryCatch(
{
obj <- TMB::MakeADFun(data = list(times = times, marks = rep(1, length(times))),
parameters = list(log_mu = log(mu),
logit_abratio = qlogis(alpha/beta),
log_beta = log(beta),
log_k = log(k)),
hessian = TRUE, DLL = "weibull_hawkes", silent = TRUE)
opt <- stats::optim(obj$par, obj$fn, obj$gr, control = list(trace = 0))
obj$objective <- opt$value
if (obj$objective < NLLmin && obj$objective != 0){
z <- stelfi::get_coefs(obj)
NLLmin <- obj$objective
}
output[i, (rep - 1)*4 + 1] <- z[1,1]; output[i, (rep-1)*4 + 2] <- z[3,1]
output[i, (rep - 1)*4 + 3] <- z[2,1]/z[3,1]; output[i, (rep - 1)*4 + 4] <- z[4,1]
}, error = function(cond){
print(cond)
}
)
}
}
print(i)
}
View(output)
plot(pars$k, output[,40])
z
plot(pars$mu, output[,1])
output <- matrix(0, nrow = reps, ncol = 8)
output[,1] = 2
(2 < Inf)
(2 > Inf)
